var teamFlight = require('cylon');
var keypress = require('keypress');
var net = require('net');

var simCommand = "string";
var moveCommand = "string";
var dispText = "Drone Command Received: ";
var dispText2 = "Drone Status Update   : ";
var droneIP = '192.168.1.1';
var	socket = 6500;

var flightTime = 0;

var throttle = 0;
var forwardAccRate = .1;
var backwardAccRate = .1;
var rightAccRate = .1;
var leftAccRate = .1;
var rotateRightAccRate = .6;
var rotateLeftAccRate = .6;
var upAccRate = .3;
var downAccRate = .3;




teamFlight.robot({
	connections: 
	{
		//loopback: { adaptor: 'loopback' },
		ardrone: { adaptor: 'ardrone', port: droneIP }
	},

	devices: 
	{    
		drone: { driver: 'ardrone' },
		nav: { driver: 'ardrone-nav' },
	},


	//Work Loop - Continues Running Until Program Exits
	work: function(droneObj) {
		
	var server = net.createServer(function (commandReceiver){
		console.log("Java client connected...");
		commandReceiver.on('data', function (simCommand) {
			moveCommand = simCommand;
			console.log("     Received the following move command from Java: " + moveCommand);   
			
				if (moveCommand == "front"){
					droneObj.moveForward(droneObj);
				}
				if (moveCommand == "back"){
					droneObj.moveBackward(droneObj);
				}
				if (moveCommand == "right"){
					droneObj.moveRight(droneObj);
				}
				if (moveCommand == "left"){
					droneObj.moveLeft(droneObj);
				}
			
			
			
			
		});
	});
	
	server.listen(socket, function () {
		console.log("     JS Server Listening On Port: " + socket);
	});

		


			




		
		//Inner Timed Loops
		every((60).second(), function() {
			console.log("       " + dispText2 + "60 Seconds of Flight Time Elapsed");
		});

		every((1).second(), function() {
			flightTime = flightTime + 1;
		});

	}, //end work function


 
  
	// Command Functions
	 moveForward: function(droneRef) {
		droneRef.drone.front(forwardAccRate + throttle);
		console.log("     " + dispText + "(" + (100 * (forwardAccRate + throttle)) + "%) Forward");
	},

	moveBackward: function(droneRef) {
		droneRef.drone.back(backwardAccRate + throttle);
		console.log("     " + dispText + "(" + (100 * (backwardAccRate + throttle)) + "%) Backward");
	},

	moveRight: function(droneRef) {
		droneRef.drone.right(rightAccRate + throttle);
		console.log("     " + dispText + "(" + (100 * (rightAccRate + throttle)) + "%) Right");
	},

	moveLeft: function(droneRef) {
		droneRef.drone.left(leftAccRate + throttle);
		console.log("     " + dispText + "(" + (100 * (leftAccRate + throttle)) + "%) Left");
	},

	rotateRight: function(droneRef) {
		droneRef.drone.clockwise(rotateRightAccRate);
		console.log("     " + dispText + "(" + (100 * (rotateRightAccRate + 0)) + "%) Right Rotate");
	},

	rotateLeft: function(droneRef) {
		droneRef.drone.counterClockwise(rotateLeftAccRate);
		console.log("     " + dispText + "(" + (100 * (rotateLeftAccRate + 0)) + "%) Left Rotate");
	},  

	moveUpInc: function(droneRef) {
		droneRef.drone.up(upAccRate);
		after((2).second(), function() {
			droneRef.droneStop(droneRef);
		});
		console.log("     " + dispText + "(" + (100 * upAccRate) + "%) Up");
	},

	moveDownInc: function(droneRef) {
		droneRef.drone.down(downAccRate);
		after((2).second(), function() {
			droneRef.droneStop(droneRef);
		});
		console.log("     " + dispText + "(" + (100 * downAccRate) + "%) Down");
	},	
		
	droneTakeOff: function(droneRef) {
		droneRef.drone.takeoff();
		console.log("     " + dispText + "Take Off");
		flightTime = 0;
	},

	droneLand: function(droneRef) {
		droneRef.drone.land();
		console.log("     " + dispText + "Landing - Flight Time: " + flightTime + " seconds");
		flightTime = 0;
	},
	  
	droneStop: function(droneRef) {
		droneRef.drone.stop();
		console.log("     " + dispText + "Stop and Reset");
	},  

	droneHover: function(droneRef) {
		droneRef.drone.hover();
		console.log("     " + dispText + "Hovering");
	},  

	droneThrottle: function(accFactor) {
		if (accFactor == 0)	throttle = 0;
		else {
			throttle = throttle + accFactor;
			
			if (throttle < 0) throttle = 0;
			if (throttle > 1) throttle = 1;
		}
		console.log("     " + dispText + "Current Acceleration Rate: " + throttle);
	},  

	

}).start();













